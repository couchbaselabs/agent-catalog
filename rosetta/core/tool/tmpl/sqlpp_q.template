""" This file has been generated automatically by Rosetta at <<GENERATION_DATE_PLACEHOLDER>> as a sqlpp_query tool. """
from __future__ import annotations

import couchbase.auth
import couchbase.options
import couchbase.cluster
import typing
import os

import rosetta.core.tool

_IS_LIST_VALUED = <<IS_LIST_VALUED_PLACEHOLDER>>

_SQLPP_QUERY = """
<<SQLPP_QUERY_PLACEHOLDER>>
"""

<<ARGUMENT_SCHEMA_PLACEHOLDER>>


<<OUTPUT_SCHEMA_PLACEHOLDER>>


def _get_couchbase_cluster() -> couchbase.cluster.Cluster:
    authenticator = couchbase.auth.PasswordAuthenticator(
        username=os.getenv('CB_USERNAME'),
        password=os.getenv('CB_PASSWORD')
    )
    conn_string = os.getenv('CB_CONN_STRING')
    return couchbase.cluster.Cluster(conn_string, couchbase.options.ClusterOptions(authenticator))


@rosetta.core.tool.tool(infer_schema=True)
def <<TOOL_NAME_PLACEHOLDER>>(argument_input: _ArgumentInput) -> typing.Union[typing.List[_ToolOutput] | _ToolOutput]:
    """
    <<TOOL_DESCRIPTION_PLACEHOLDER>>
    """
    cluster = _get_couchbase_cluster()

    # We need to safeguard against weird LLM function calls.
    if isinstance(argument_input, dict):
        named_parameters = argument_input
    elif isinstance(argument_input, _ArgumentInput):
        named_parameters = argument_input.dict()
    else:
        raise ValueError("Bad input given to SQL++ tool!")

    query_results = cluster.query(
        _SQLPP_QUERY,
        couchbase.options.QueryOptions(named_parameters=named_parameters)
    )

    tool_results = []
    if _IS_LIST_VALUED:
        for result in query_results:
            tool_results.append(_ToolOutput(**result))
        return tool_results
    else:
        # TODO (GLENN): Clean this up.
        for result in query_results:
            return _ToolOutput(**result)

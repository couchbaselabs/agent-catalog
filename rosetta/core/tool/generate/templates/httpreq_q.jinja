""" This file has been generated automatically by Rosetta at {{ time }} as a http_request tool. """
from __future__ import annotations

import requests
import typing
import json
import os

import rosetta.core.tool

{% if input is not none %}
{{ input.model.code }}
parameter_locations = {{ input.locations }}
{% endif %}

@rosetta.core.tool.tool(infer_schema=True)
def {{ tool_metadata.name }}({% if input is not none %}argument_input: {{ input.model.type_name }}{% endif %}) -> str:
    """
    {{ tool_metadata.description }}
    """

    {% if input is not none %}
    # We need to safeguard against weird LLM function calls.
    if isinstance(argument_input, dict):
        named_parameters = argument_input
    elif isinstance(argument_input, {{ input.model.type_name }}):
        named_parameters = argument_input.dict()
    else:
        raise ValueError("Bad input given to HTTP request tool!")
    {% endif %}

    # TODO (GLENN): We need to formalize how to handle multiple URLs.
    for url in {{ urls }}:
        request_body = dict()
        parameters = dict()
        headers = dict()
        cookies = dict()
        for name, location in parameter_locations.items():
            match location:
                case 'header':
                    headers[name] = named_parameters[name]
                case 'query':
                    parameters[name] = named_parameters[name]
                case 'cookie':
                    cookies[name] = named_parameters[name]
                case 'path':
                    url = url.replace('{' + name + '}', named_parameters[name])
                case 'body':
                    request_body[name] = named_parameters[name]
                case _:
                    # We should never reach here...
                    raise ValueError('Unknown location of parameter!')

        request_args = {
            method='{{ method }}',
            url=url,
        }
        if len(parameters) > 0:
            request_args['params'] = parameters
        if len(headers) > 0:
            request_args['headers'] = headers
        if len(cookies) > 0:
            request_args['cookies'] = cookies
        if len(body) > 0:
            request_args['data'] = json.dumps(request_body)

        response = requests.request(**request_args)
        if response.status_code == 200:
            return response.text

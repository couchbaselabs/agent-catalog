import enum
import pydantic
import typing
import uuid

from ..version import VersionDescriptor


class Kind(enum.StrEnum):
    """The different types of logs that are recognized.

    1. System refers to messages that are generated by (none other than) the system. In agent frameworks, these
       messages are typically templated and instantiated with user-defined objectives / instructions.
    2. Tool refers to messages that are generated by a tool. These messages are not to be confused with _assistant_
       messages that generate tool calls.
    3. LLM refers to all messages that are generated using an LLM.
    4. Human refers to messages that are generated by a human. Note that some agent frameworks (e.g., ControlFlow) never
       actually use this role, user interaction is performed through tool calls. Application developers must manually
       log these messages.
    5. Assistant refers to the messages that are directly served back to the user. Again, some agent frameworks won't
       actually use this role, so application developers must manually log these messages.
    6. Feedback refers to messages that are generated as feedback _from the end user_. How these messages are captured
       is application specific.
    7. Transition refers to messages that are generated as a transition into a state / task / agent. This is
       application specific, and is used to trace the trajectory of a conversation."""

    System = "system"
    Tool = "tool"
    LLM = "llm"

    Human = "human"
    Assistant = "assistant"
    Feedback = "feedback"
    Transition = "transition"


class Log(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(use_enum_values=True, frozen=True)

    timestamp: pydantic.AwareDatetime = pydantic.Field(
        description="Timestamp of the generated record. This field must have a timezone attached as well.",
        examples=["2024-08-26T12:02:59.500Z", "2024-08-26T12:02:59.500+00:00"],
    )

    session: typing.AnyStr = pydantic.Field(
        default_factory=lambda: uuid.uuid4().hex,
        description="The thread / session / conversation this record belongs to.",
    )

    kind: Kind = pydantic.Field(
        description="The type of log that this record represents.",
        examples=[Kind.LLM, Kind.System, Kind.Tool],
    )

    content: typing.Any = pydantic.Field(
        description="The content of the record. This should be as close to the producer as possible.",
    )

    model: typing.AnyStr = pydantic.Field(description="The specific model (LLM) that this message is associated with.")

    grouping: typing.Optional[typing.AnyStr] = pydantic.Field(
        description="A grouping identifier for this message. In the case of LangChain model audits, this is associated "
        "with a '_generate' invocation.",
        default=None,
    )

    annotations: typing.Optional[typing.Dict] = pydantic.Field(
        description="Additional annotations that can be added to the message.", default_factory=dict
    )

    catalog_version: VersionDescriptor = pydantic.Field(
        description="A unique identifier that defines a catalog version / snapshot / commit."
    )

    agent_name: typing.Optional[str] = pydantic.Field(
        description="The name of the agent that this message is associated with.",
        default=None,
    )

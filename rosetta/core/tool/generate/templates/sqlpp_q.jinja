""" This file has been generated automatically by Rosetta at {{ time }} as a sqlpp_query tool. """
from __future__ import annotations

import couchbase.auth
import couchbase.options
import couchbase.cluster
import typing
import os

import rosetta.core.tool

{{ input_schema.code }}

{{ output_schema.code }}

# TODO (GLENN): Handle this better.
def _get_couchbase_cluster() -> couchbase.cluster.Cluster:
    authenticator = couchbase.auth.PasswordAuthenticator(
        username=os.getenv('CB_USERNAME'),
        password=os.getenv('CB_PASSWORD')
    )
    conn_string = os.getenv('CB_CONN_STRING')
    return couchbase.cluster.Cluster(conn_string, couchbase.options.ClusterOptions(authenticator))


@rosetta.core.tool.tool(infer_schema=True)
def {{ tool.name }}(argument_input: {{ input_schema.name }}) -> {% if list_valued %}typing.List[{{ output_schema.name }}]{% else %}{{ output_schema.name }}{% endif %}:
    """
    {{ tool.description }}
    """
    cluster = _get_couchbase_cluster()

    # We need to safeguard against weird LLM function calls.
    if isinstance(argument_input, dict):
        named_parameters = argument_input
    elif isinstance(argument_input, {{ input_schema.name }}):
        named_parameters = argument_input.dict()
    else:
        raise ValueError("Bad input given to SQL++ tool!")

    query_results = cluster.query(
        """ {{ tool.sqlpp_query }} """,
        couchbase.options.QueryOptions(named_parameters=named_parameters)
    )

    tool_results = []
    {% if list_valued %}
    for result in query_results:
        tool_results.append({{ output_schema.name }}(**result))
    return tool_results
    {% else %}
    # TODO (GLENN): Clean this up.
    for result in query_results:
        return {{ output_schema.name }}(**result)
    {% endif %}
-- Note: all_sessions.sqlpp should be run before this script.
-- TODO (GLENN): The purpose of this view is to aid in using Ragas, but we should use the raw_logs instead.
CREATE OR REPLACE ANALYTICS VIEW LatestMessages AS
WITH LatestGenerations AS (
    FROM
        `[BUCKET_NAME]`.`[SCOPE_NAME]`.`[LOG_COLLECTION_NAME]` AS s
    WHERE
        s.`grouping` IS NOT NULL
    GROUP BY
        s.`grouping`,
        s.session
        GROUP AS g
    LETTING
        msgs = (
            FROM
                g AS gi
            SELECT
                gi.s.content.content,
                gi.s.content.tool_calls,
                gi.s.kind,
                gi.s.timestamp,
                ROW_NUMBER() OVER () AS row_num
        ),
        first_human = (
            FROM
                msgs AS msgsi
            WHERE
                msgsi.kind = "human"
            SELECT
                msgsi.content,
                msgsi.row_num
            ORDER BY
                msgsi.timestamp ASC
            LIMIT 1
        )[0],
        last_message = (
            FROM
                msgs AS msgsi
            SELECT
                COALESCE(msgsi.content, msgsi.tool_calls) AS content,
                msgsi.row_num
            ORDER BY
                msgsi.timestamp DESC
            LIMIT 1
        )[0],
        context = (
            FROM
                msgs AS msgsi
            WHERE
                msgsi.row_num != first_human.row_num AND
                msgsi.row_num != last_message.row_num
            SELECT VALUE
               COALESCE(msgsi.content, msgsi.tool_calls)
        )
    SELECT
        first_human.content AS question,
        last_message.content AS answer,
        context AS contexts,
        ROW_NUMBER() OVER () AS row_num
)
SELECT
    (FROM LatestGenerations e SELECT VALUE e.question ORDER BY e.row_num) AS question,
    (FROM LatestGenerations e SELECT VALUE e.answer ORDER BY e.row_num) AS answer,
    (FROM LatestGenerations e SELECT VALUE e.contexts ORDER BY e.row_num) AS contexts
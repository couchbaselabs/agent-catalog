{
  "catalog_schema_version": "0.0.0",
  "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
  "items": [
  {
    "annotations":
    {
      "ccpa_2019_compliant": "true",
      "gdpr_2016_compliant": "true"
    },
    "description": "Fetch snippets of travel blogs using a user's interests.\n",
    "embedding": [-0.027521444484591484, -0.08420254290103912, -0.03662494570016861, -0.0033154634293168783, 0.06585805118083954, -0.012026743032038212, 0.08438055962324142, 0.0014518920797854662, -0.0551922470331192, 0.04457639530301094, -0.035456325858831406, 0.00603507598862052, -0.04268060252070427, 0.0886862576007843, 0.06689716875553131, -0.008495649322867393, 0.01929435133934021, 0.02741166017949581, 0.008085144683718681, 0.05120274797081947, 0.01378064975142479, 0.005606744904071093, -0.05138358846306801, 0.07883346825838089, 0.019961019977927208, 0.0009710550657473505, -0.10513085871934891, 0.043659504503011703, 0.022486364468932152, 0.03519981727004051, 0.00943815615028143, 0.08187726140022278, -0.0008332279976457357, -0.010346569120883942, 0.09477711468935013, 0.04015650227665901, -0.0004455077869351953, 0.04072071984410286, 0.07406669855117798, 0.062404412776231766, -0.0008168609929271042, -0.05974160507321358, -0.04284338653087616, 0.015750762075185776, -0.01117005106061697, 0.01694306917488575, 0.02217157743871212, 0.011419383808970451, 0.033161453902721405, -0.03051440231502056, -0.11945086717605591, -0.05835704877972603, -0.041304804384708405, -0.057208940386772156, -0.015932301059365273, -0.03043048270046711, -0.050827756524086, -0.06163153424859047, -0.07448253780603409, -0.01197157520800829, -0.001092778518795967, -0.044261280447244644, 0.024386771023273468, 0.04841699078679085, -0.05890461429953575, -0.0049100578762590885, -0.051229625940322876, 0.11117255687713623, 0.05598092079162598, -0.06750446557998657, -0.040715865790843964, 0.03983704373240471, -0.061454664915800095, 0.10014574229717255, 0.035638753324747086, -0.06646065413951874, -0.010543217882514, -0.040431778877973557, -0.07960641384124756, -0.058089479804039, -0.037927694618701935, -0.01036336924880743, 0.015059305354952812, -0.06032479926943779, 0.006813407875597477, -0.03750479221343994, 0.033592090010643005, -0.001586642232723534, 0.02757776901125908, 0.051776301115751266, -0.032898079603910446, -0.10685074329376221, -0.003262158716097474, 0.0060281902551651, 0.0061835311353206635, 0.014935905113816261, -0.04112250730395317, -0.018812313675880432, 0.006630935240536928, 0.07651655375957489, 0.030463632196187973, 0.02922600880265236, 0.10246343165636063, -0.00045610187225975096, -0.023722277954220772, 0.029336778447031975, -0.045814868062734604, 0.030160045251250267, 0.10524174571037292, -0.0347701758146286, 0.0016932713333517313, 0.16445407271385193, 0.035284385085105896, -0.062080226838588715, 0.03251347690820694, -0.10479351878166199, -0.03255593404173851, 0.06007976084947586, 0.04933793470263481, 0.042833831161260605, 0.043509773910045624, -0.06651625037193298, 0.024216335266828537, 0.03495993837714195, -0.0608343668282032, -0.04731907695531845, 0.029894482344388962, -0.010787415318191051, 0.05093803629279137, 0.03042653761804104, 0.060547225177288055, 0.13637836277484894, 0.01152430847287178, 0.037083011120557785, -0.057013027369976044, -0.09921504557132721, -0.050229813903570175, 0.002997976029291749, -0.015392737463116646, 0.10328828543424606, 0.06389869749546051, 0.08103151619434357, -0.07446005195379257, -0.005636298563331366, -0.010525328107178211, 0.020227957516908646, 0.06748122721910477, -0.038597460836172104, -0.014722573570907116, -0.0751936063170433, 0.08237221837043762, -0.1208183690905571, 0.009412460960447788, -0.0270702987909317, 0.022150956094264984, 0.040224336087703705, 0.00527618732303381, 0.06756538152694702, -0.06875155121088028, -0.03301314637064934, -0.09778804332017899, -0.027460025623440742, -0.022594187408685684, 0.03810577839612961, -0.06878963112831116, -0.015273045748472214, -0.0157936904579401, -0.032487060874700546, -0.07603339105844498, -0.08115115016698837, -0.016573961824178696, 0.01151313353329897, -0.05865762010216713, 0.022887123748660088, -0.06914360076189041, 0.1040787324309349, 0.02917459048330784, -0.0078254584223032, 0.03279214724898338, -0.09292664378881454, -0.01395955216139555, -0.06200359761714935, -0.004626705311238766, 0.032173171639442444, 0.00400153873488307, -0.0007606407743878663, 0.024564828723669052, -0.012650864198803902, 0.07022023946046829, 0.08932539820671082, 0.00833873264491558, -0.0465659461915493, 0.09252137690782547, 0.058312058448791504, 0.03838542476296425, -0.009231961332261562, -0.0322730615735054, -0.006163049954921007, 0.009154611267149448, -0.006065576337277889, 0.0473533496260643, -0.0948164165019989, -0.05797753483057022, -0.024136006832122803, -0.016601037234067917, -0.07886329293251038, -0.015156310983002186, 0.06454988569021225, 0.0009581642225384712, -0.023322859779000282, 0.02991008199751377, 0.05512237548828125, 0.04710308834910393, -0.04585961252450943, 0.05991831794381142, -0.07403919845819473, -0.012035075575113297, 0.022013068199157715, 0.03438808023929596, 0.0041335709393024445, -0.013941842131316662, -0.05009794980287552, -0.04464114084839821, 8.278641574908647e-33, -0.012937456369400024, 0.04600953683257103, 0.042048413306474686, 0.005844913888722658, -0.017424728721380234, 0.011639256961643696, 0.035998549312353134, -0.018871791660785675, 0.029431741684675217, 0.016481084749102592, -0.164930060505867, -0.014579798094928265, 0.016078807413578033, 0.07378997653722763, 0.028000103309750557, 0.011279485188424587, 0.07129665464162827, 0.023441048339009285, -0.08282259106636047, 0.12743262946605682, -0.039846841245889664, 0.0391901433467865, -0.10001479834318161, -0.039488885551691055, 0.1053994670510292, 0.03272074833512306, 0.05332339182496071, -0.06859396398067474, 0.005034342408180237, 0.0020413368474692106, 0.03904442861676216, 0.007303520105779171, -0.06368770450353622, 0.01996445655822754, -0.020523106679320335, 0.02586050145328045, -0.03137555718421936, 0.07274466007947922, 0.012693090364336967, 0.058634690940380096, 0.1540287584066391, 0.011551359668374062, 0.019727522507309914, 0.04576200246810913, -0.018757808953523636, 0.014792474918067455, -0.01274678111076355, 0.09542781114578247, 0.07516258955001831, -0.034554727375507355, 0.04044683277606964, 0.006061401218175888, -0.019269553944468498, -0.00922815315425396, 0.01546891313046217, -0.040056031197309494, -0.052546851336956024, -0.05248020216822624, 0.038405995815992355, -0.03833632171154022, -0.08473005890846252, -0.040669601410627365, 0.015072298236191273, -0.014485725201666355, 0.03142252191901207, -0.0802023634314537, 0.0033974801190197468, -0.012084269896149635, -0.06583995372056961, -0.04503355547785759, 0.0688958466053009, -0.01146897953003645, 0.04201209917664528, -0.08331461250782013, 0.07663171738386154, 0.029630068689584732, 0.08497947454452515, 0.08099421858787537, 0.012738893739879131, 0.006762954872101545, 0.023056088015437126, 0.030176328495144844, -0.003221958177164197, -0.06601309776306152, 0.02274954691529274, 0.0201263390481472, -0.05881761759519577, 0.04956948384642601, -0.05322667211294174, -0.0452096126973629, 0.012437338940799236, -0.04483485594391823, 0.0467696487903595, 0.0014000363880768418, -0.01858118548989296, 3.096601829635275e-32, -0.07568458467721939, -0.039744552224874496, -0.03569251298904419, 0.008203994482755661, 0.04193529114127159, -0.018435316160321236, -0.006814748980104923, 0.07750964909791946, 0.029828358441591263, 0.05778556317090988, 0.0031479320023208857, -0.07083258777856827, -0.06100565195083618, 0.0676610916852951, 0.03693794459104538, -0.027513623237609863, 0.08202113211154938, 0.03525238111615181, -0.0045167203061282635, -0.00990327075123787, -0.0022459174506366253, 0.0782603994011879, 0.004251047037541866, -0.09670308977365494, 0.008164781145751476, 0.014618434943258762, -0.041276656091213226, -0.11606989055871964, 0.05837069824337959, -0.017770694568753242, -0.04001039266586304, 0.014853554777801037, -0.02689245715737343, -0.03855817764997482, -0.00021404032304417342, -0.017169110476970673, -0.02903282828629017, -0.04728296399116516, -0.021197276189923286, 0.011407495476305485, 0.02931768074631691, -0.09816662967205048, 0.09483419358730316, -0.03534664213657379, -0.05181266367435455, 0.01154743880033493, -0.03088444471359253, -0.024682482704520226, 0.019671590998768806, -0.010262026451528072, -0.06807663291692734, -0.07139961421489716, 0.09176290780305862, 0.01851263828575611, 0.03397403657436371, -0.060319576412439346, -0.005131248384714127, -0.007699310313910246, 0.0014265432255342603, -0.04062706232070923, 0.0005971064674668014, 0.00754553684964776, -0.054151516407728195, 0.017416248098015785],
    "identifier": "src/resources/tools/blogs_from_interests.yaml:get_travel_blog_snippets_from_user_interests:git_a2dc7a02483b93406e1c82c62ef6b89558373451",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user_interests\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "name": "get_travel_blog_snippets_from_user_interests",
    "record_kind": "semantic_search",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/tools/blogs_from_interests.yaml",
    "vector_search":
    {
      "bucket": "travel-sample",
      "collection": "article",
      "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
      "index": "articles-index",
      "num_candidates": 3,
      "scope": "inventory",
      "text_field": "text",
      "vector_field": "vec"
    },
    "version":
    {
      "identifier": "a2dc7a02483b93406e1c82c62ef6b89558373451",
      "is_dirty": false,
      "timestamp": "2024-10-15T10:11:18.294322Z",
      "version_system": "git"
    }
  },
  {
    "description": "Find a list of direct routes between two airports using source_airport and destination_airport.\n",
    "embedding": [0.06763264536857605, -0.013151390478014946, -0.06174251809716225, 0.024781031534075737, 0.06794998049736023, 0.03502585366368294, -0.07320229709148407, -0.027989614754915237, -0.021669408306479454, 0.01363323349505663, -0.022702954709529877, -0.07794512808322906, -0.02180541679263115, -0.011490467935800552, 0.024582969024777412, 0.003524932311847806, 0.0216072965413332, 0.06606462597846985, 0.005220609717071056, 0.043391551822423935, 0.07627526670694351, 0.059072934091091156, -0.012614353559911251, 0.05083596333861351, 0.01844709739089012, 0.09019489586353302, -0.051578935235738754, 0.04645613580942154, 0.0843881294131279, 0.013568393886089325, 0.09468254446983337, 0.047309573739767075, -0.0891738012433052, -0.03758294880390167, 0.06745923310518265, 0.020261049270629883, 0.012150485068559647, 0.08826595544815063, 0.03797577694058418, -0.08465302735567093, 0.06550158560276031, -0.0108761852607131, 0.061243318021297455, 0.006654419004917145, -0.0158411655575037, -0.045867688953876495, 0.02101993001997471, 0.04525219649076462, 0.045931532979011536, -0.009764529764652252, -0.004060158506035805, -0.061044879257678986, -0.05857226625084877, 0.040562793612480164, 0.016566051170229912, 0.004620129242539406, 0.039029546082019806, -0.0881979689002037, -0.01877361536026001, -0.08103646337985992, -0.10638919472694397, -0.07763481140136719, -0.008653233759105206, -0.02388855442404747, -0.009603828191757202, 0.07796766608953476, -0.0037707798182964325, -0.0047441101633012295, 0.0036345799453556538, -0.06096402555704117, -0.008458467200398445, 0.06341880559921265, -0.0487871989607811, -0.024654000997543335, -5.368524944060482e-05, -0.07176877558231354, 0.04435557499527931, 0.04291285574436188, -0.054889384657144547, -0.0010926795657724142, -0.008985382504761219, -0.015638580545783043, -0.04674539342522621, 0.04626690223813057, -0.021163612604141235, -0.05201253294944763, -0.03810647875070572, 0.024844275787472725, 0.04759103059768677, -0.07407087832689285, 0.022869786247611046, 0.03229166194796562, -0.014895343221724033, 0.03291826695203781, 0.07488085329532623, -0.03733636438846588, -0.009624972008168697, -0.02081150747835636, 0.07951272279024124, 0.008007790893316269, 0.12472169101238251, 0.024263011291623116, -0.06748460233211517, 0.07699807733297348, -0.02334563434123993, 0.0052191573195159435, 0.009254266507923603, -0.024056686088442802, -0.010119828395545483, 0.03229188919067383, -0.007710319943726063, 0.04652147367596626, -0.01674794778227806, -0.07852005958557129, -0.021815985441207886, 0.0735425353050232, -0.001548344036564231, 0.010127422399818897, -0.003522851737216115, -0.024491526186466217, -0.02398527041077614, -0.09013292193412781, 0.0811084732413292, 0.01918783038854599, -0.03482430800795555, -0.07091580331325531, 0.0018505139742046595, -0.12431494891643524, 0.0593046173453331, -0.00036622938932850957, 0.02441462315618992, 0.03155669942498207, -0.05800757184624672, -0.006432497873902321, -0.07025530934333801, 0.007126991171389818, 0.0008167494088411331, -0.050582122057676315, -0.06007876247167587, 0.03145812079310417, 0.015204841271042824, -0.011897976510226727, 0.012751910835504532, -0.01825173757970333, 0.040751535445451736, 0.00023513654014095664, -0.07612508535385132, -0.057081542909145355, 0.02302042581140995, -0.0013394341804087162, -0.018864773213863373, -0.07707469910383224, 0.14504902064800262, -0.01847677119076252, -0.09021340310573578, 0.0010700769489631057, 0.04484880715608597, 0.03328617662191391, 0.018084244802594185, 0.061872564256191254, 0.04098736122250557, 0.019670292735099792, -0.10910115391016006, 0.0030900186393409967, 0.017862020060420036, 0.06000983715057373, 0.0055800871923565865, 0.03250047564506531, -0.09454049915075302, -0.0022534411400556564, -0.005202092230319977, -0.030163003131747246, -0.013819037936627865, 0.01502638403326273, -0.1009751409292221, -0.01891130581498146, 0.025702184066176414, 0.06280118227005005, -0.030820660293102264, -0.016765862703323364, 0.02277507819235325, -0.04450635239481926, -0.0027046368923038244, -0.05528673157095909, 0.02808000147342682, 0.033482056111097336, 0.07616546005010605, -0.03007473051548004, -0.021687451750040054, 0.04707733169198036, -0.0017690903041511774, 0.02845768816769123, 0.05190218612551689, 0.05958947539329529, -0.017857626080513, -0.021930303424596786, 0.05274943634867668, -0.010216514579951763, -0.040706817060709, -0.03895685449242592, 0.03935503959655762, 0.07593931257724762, -0.002006134018301964, -0.05357632040977478, -0.12719030678272247, -0.06872733682394028, 0.02726053260266781, 0.003583504119887948, -0.041445985436439514, 0.1014699637889862, -0.02370358072221279, 0.03496590629220009, 0.016604218631982803, 0.05744383484125137, -0.01037740521132946, -0.1370362788438797, -0.011039295233786106, -0.06206198409199715, -0.045686714351177216, 0.03444870933890343, -0.12021838128566742, 0.05898955091834068, 0.02354522980749607, -1.4397681642546888e-33, 0.016949091106653214, -0.0031929058022797108, 0.010010479018092155, -0.034558068960905075, 0.0240093395113945, -0.03091689571738243, 0.09165099263191223, -0.03140252083539963, 0.1085924506187439, 0.11945918947458267, -0.0531119629740715, -0.08463672548532486, 0.024210134521126747, 0.04874637722969055, 0.039946138858795166, -0.12226992100477219, 0.028488630428910255, 0.005885415710508823, -0.07411027699708939, 0.044279370456933975, -0.02088395692408085, -0.00373605964705348, -0.09723340719938278, -0.161311537027359, 0.00934904906898737, 0.054221492260694504, 0.01933295652270317, 0.019404513761401176, -0.05855344980955124, -0.003567891661077738, -0.07561861723661423, -0.03108363039791584, 0.040516551584005356, 0.05698937922716141, -0.010431677103042603, 0.09618160128593445, -0.03038679249584675, 0.01824495755136013, 0.04145432636141777, -0.045760925859212875, 0.03395704925060272, 0.02262479066848755, 0.020875100046396255, 0.035992760211229324, 0.05243229120969772, 0.05931553244590759, -0.048463210463523865, -0.061956800520420074, -0.04077139496803284, -0.07177475839853287, 0.11685800552368164, 0.1128995344042778, -0.12051277607679367, -0.023732881993055344, 0.02398676984012127, 0.004312060307711363, -0.014091262593865395, -0.05628379434347153, 0.06260357052087784, -0.005296479910612106, -0.04001462459564209, -0.057930462062358856, 0.03980641067028046, 0.009667271748185158, -0.03407583758234978, -0.015866683796048164, -0.034902602434158325, -0.0016222773119807243, 0.09895563125610352, -0.015933264046907425, -0.034650154411792755, 0.04341341555118561, -0.012420650571584702, 0.1127181276679039, -0.043779924511909485, -0.03785356134176254, 0.023042719811201096, 0.0709785744547844, -0.07293977588415146, 0.004335502162575722, -0.05674262344837189, 0.05468430742621422, -0.005325637757778168, -0.017881732434034348, -0.023136336356401443, 0.12788057327270508, -0.05845487117767334, -0.0038230379577726126, -0.0237239059060812, -0.013992168009281158, -0.03548673167824745, 0.06311319768428802, 0.059188809245824814, -0.026160160079598427, 0.08709210902452469, 3.932485576929434e-32, 0.024036893621087074, 0.05563235655426979, -0.05587148666381836, 0.06887460500001907, -0.0028403233736753464, 0.01822427287697792, -0.01674467884004116, -0.03209459036588669, 0.006706266663968563, 0.008797655813395977, -0.0237533338367939, 0.06868021935224533, -0.08213523030281067, 0.058355722576379776, 0.007726723328232765, 0.049069844186306, -0.049462366849184036, -0.03298058360815048, 0.03947615996003151, -0.04360894113779068, -0.06824011355638504, 0.01364726573228836, -0.0613158717751503, -0.025834543630480766, -0.00767448591068387, 0.04545353725552559, -0.0459812767803669, -0.03339571878314018, 0.03085160255432129, -0.004997094627469778, 0.03584372252225876, -0.021367769688367844, 0.017625125125050545, 0.04601326957345009, -0.0010502311633899808, -0.03128618001937866, -0.0005379264475777745, -0.05960680544376373, 0.0447981134057045, 0.003414621576666832, -0.02065524272620678, 0.012696320191025734, 0.001470891758799553, -0.04064248502254486, 0.037575941532850266, -0.027543557807803154, 0.012708178721368313, -0.11800083518028259, -0.02603442594408989, -0.01567872241139412, 0.0027047295588999987, -0.0009723411058075726, 0.06317832320928574, -0.011437194421887398, 0.007841121405363083, -0.0857158973813057, 0.00496298260986805, -0.06337913125753403, 0.09589883685112, -0.0820717066526413, 0.012481789104640484, 0.10598143935203552, -0.022605258971452713, -0.004976003430783749],
    "identifier": "src/resources/tools/find_direct_flights.sqlpp:find_direct_routes_between_airports:git_a2dc7a02483b93406e1c82c62ef6b89558373451",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_direct_routes_between_airports",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_direct_routes_between_airports\n\ndescription: >\n    Find a list of direct routes between two airports using source_airport and destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM   `travel-sample`.inventory.route r\nWHERE  r.sourceairport = $source_airport AND\n       r.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [ r.airline ],\n               \"layovers\"     : [],\n               \"from_airport\" : r.sourceairport,\n               \"to_airport\"   : r.destinationairport }\nLIMIT  10;\n",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/tools/find_direct_flights.sqlpp",
    "version":
    {
      "identifier": "a2dc7a02483b93406e1c82c62ef6b89558373451",
      "is_dirty": false,
      "timestamp": "2024-10-15T10:11:18.245717Z",
      "version_system": "git"
    }
  },
  {
    "description": "Find a list of routes between two airports with one layover. The routes always start at source_airport and end at destination_airport.\n",
    "embedding": [0.1396380215883255, -0.00717008113861084, -0.0834602639079094, -0.0027065537869930267, 0.037803951650857925, 0.03421640768647194, -0.0764637291431427, 0.008244074881076813, -0.031016092747449875, 0.009322411380708218, -0.023016398772597313, -0.07046724855899811, -0.021735157817602158, 0.0035239593125879765, -0.0038387274835258722, 0.013238828629255295, -0.015244063921272755, 0.08737513422966003, 0.018248816952109337, 0.027043867856264114, 0.06370620429515839, 0.0456794798374176, -0.02516806125640869, 0.05096469447016716, -0.014494368806481361, 0.10034105181694031, -0.01657308265566826, -0.01253505889326334, 0.07289431989192963, -0.009950115345418453, 0.054616667330265045, 0.03604928031563759, -0.07701794058084488, -0.05948833376169205, 0.06476981192827225, 0.027719082310795784, 0.0024406651500612497, 0.09979942440986633, 0.04406280815601349, -0.06555280089378357, 0.04830913245677948, 0.026693250983953476, 0.0933656319975853, -0.0007054078159853816, -0.021684374660253525, -0.013978737406432629, 0.01718859001994133, 0.006479624193161726, 0.05930494889616966, -0.007406577002257109, 0.03434723615646362, -0.05565446987748146, -0.054900847375392914, 0.059957459568977356, 0.014789793640375137, 0.01264233235269785, 0.07416181266307831, -0.061210956424474716, -0.01626129448413849, -0.028903229162096977, -0.08842159807682037, -0.07795696705579758, -0.02559090591967106, -4.95784443046432e-05, 0.016759557649493217, 0.10432980209589005, 0.007804697845131159, 0.003257219912484288, -0.028114328160881996, -0.036679718643426895, -0.041124437004327774, 0.021950215101242065, -0.07301997393369675, -0.04054363816976547, -0.017100198194384575, -0.04541228711605072, 0.05782896652817726, 0.03797924891114235, -0.03706943988800049, 0.02173229493200779, 0.002097529359161854, -0.010423404164612293, 0.004779353272169828, 0.053523894399404526, -0.04123753309249878, -0.06142009422183037, -0.026746783405542374, 0.05902629345655441, 0.01795332320034504, -0.06457202136516571, 0.03364798054099083, 0.007880455814301968, 0.041190989315509796, 0.045973438769578934, 0.0762443095445633, 0.007297406438738108, 0.030713515356183052, -0.012540742754936218, 0.08051549643278122, 0.024692771956324577, 0.09351356327533722, -0.02551903948187828, 0.02697066403925419, 0.09898249059915543, -0.01271508913487196, 0.018605388700962067, -0.033270932734012604, -0.06026450917124748, 0.013300769031047821, 0.040964167565107346, -0.03733605146408081, 0.02643549256026745, 0.023246489465236664, -0.07458996772766113, -0.0042351954616606236, 0.0654863491654396, 0.01830432377755642, 0.006230163853615522, -0.025446096435189247, -0.023651113733649254, -0.0391448549926281, -0.02382170595228672, 0.06284454464912415, -0.02776337042450905, -0.03276737034320831, -0.06688937544822693, 0.04309086501598358, -0.12734487652778625, 0.06405899673700333, -0.07142578810453415, 0.055891003459692, 0.03481433168053627, -0.05549515783786774, -0.036570437252521515, -0.048433735966682434, -0.020447157323360443, -0.051557380706071854, -0.03801446035504341, -0.07405347377061844, 0.0024547106586396694, -0.05058686062693596, -0.025842053815722466, 0.062425196170806885, -0.057302236557006836, 0.04346126317977905, -0.0024474288802593946, -0.086036317050457, -0.09518522769212723, 0.025874463841319084, -0.041908230632543564, -0.062547966837883, -0.06530269235372543, 0.14357885718345642, -0.009573264047503471, -0.07855559885501862, -0.00897302757948637, 0.017254292964935303, 0.017106113955378532, 0.007091924082487822, 0.1019326001405716, 0.005323235411196947, 0.05509325489401817, -0.12642306089401245, -0.034009844064712524, -0.00800346676260233, 0.060560841113328934, -0.022903915494680405, 0.03116140328347683, -0.06118030473589897, -0.005018600262701511, -0.01126732025295496, -0.025580262765288353, 0.0038581702392548323, 0.016400514170527458, -0.0941130593419075, -0.035830236971378326, 0.03559568524360657, 0.05882660299539566, -0.03128410875797272, -0.06749676167964935, -0.025243399664759636, -0.042552776634693146, -0.004064694978296757, -0.056725602596998215, 0.037539348006248474, -0.0005974844098091125, 0.06269382685422897, -0.020313389599323273, -0.015596622601151466, -0.0011550381314009428, -0.014491274021565914, 0.004165332298725843, 0.07234562933444977, 0.07892189919948578, -0.017263205721974373, 0.0011029334273189306, 0.01167885772883892, -0.027552392333745956, 0.0006809746846556664, -0.06230372563004494, -0.02064366638660431, 0.10238104313611984, -0.013201874680817127, -0.03464542329311371, -0.1363353282213211, -0.02806100994348526, 0.053051769733428955, -0.024681195616722107, -0.029908739030361176, 0.08863348513841629, -0.01154025737196207, 0.009559748694300652, 0.015445108525454998, 0.0733368769288063, -0.04597005248069763, -0.13350538909435272, -0.034342411905527115, -0.060811903327703476, -0.10841485112905502, 0.043020300567150116, -0.10700935125350952, 0.046328745782375336, 0.02584603615105152, 1.3329465844916519e-33, 0.050074297934770584, -0.042761459946632385, -0.021808980032801628, 0.012048665434122086, 0.05624201521277428, -0.029278401285409927, 0.10239419341087341, -0.04838283732533455, 0.08414686471223831, 0.1523665338754654, -0.025796568021178246, -0.07860933989286423, 0.03991829976439476, 0.07205239683389664, -0.0017406926490366459, -0.11511979252099991, 0.04770243912935257, 0.013569904491305351, -0.05308426916599274, 0.020605338737368584, -0.02087552472949028, -0.024769382551312447, -0.1172671839594841, -0.13388577103614807, 0.04313921928405762, 0.05747557058930397, 0.03679311275482178, 0.021753037348389626, -0.04760412126779556, 0.004949852824211121, -0.03872902691364288, -0.07276631146669388, 0.09080410748720169, 0.022231418639421463, -0.03373750299215317, 0.12979064881801605, -0.08018860965967178, 0.023718640208244324, 0.03936072438955307, -0.0075234295800328255, 0.018227046355605125, 0.013694677501916885, 0.050687093287706375, 0.03555568307638168, 0.04697352275252342, 0.02511807158589363, -0.0709168016910553, -0.009003051556646824, -0.025256305932998657, -0.07932154089212418, 0.06739687919616699, 0.10863661766052246, -0.08444880694150925, -0.01188614871352911, 0.05322829261422157, 0.007101844064891338, 0.009171110577881336, -0.006593102123588324, 0.04677146300673485, 0.011751077137887478, -0.03980754315853119, -0.062032550573349, 0.0790722593665123, 0.02050819806754589, -0.008235625922679901, -0.0576372891664505, -0.036181025207042694, 0.030197886750102043, 0.08182501792907715, -0.0033569373190402985, -0.05164995416998863, 0.03459911048412323, -0.05391236022114754, 0.07076973468065262, -0.024328244850039482, -0.04656248912215233, 0.040612347424030304, 0.0029331515543162823, -0.05900907889008522, 0.013017046265304089, -0.07547983527183533, 0.04881100356578827, -0.011318597011268139, -0.03427007049322128, -0.031183524057269096, 0.08382029831409454, -0.04384148493409157, 0.046641651540994644, 0.037284597754478455, 0.016506267711520195, -0.04061543568968773, 0.04007367789745331, 0.035128768533468246, -0.05797233805060387, 0.010081461630761623, 5.739751423716274e-32, 0.050660792738199234, 0.057700783014297485, -0.011035569943487644, 0.01974213682115078, 0.014575055800378323, 0.04314730316400528, 0.03443241864442825, -0.04941805824637413, -0.018662912771105766, -0.02896961197257042, -0.03310363367199898, 0.07120735198259354, -0.04806089401245117, 0.058420438319444656, -0.014841008931398392, 0.023163802921772003, -0.030404986813664436, -0.03075205162167549, -0.004239480011165142, -0.04432425647974014, -0.10029367357492447, -0.020516254007816315, -0.0667833685874939, -0.003699171356856823, 0.001355511136353016, 0.04647348076105118, -0.026929594576358795, -0.026166720315814018, 0.03179199993610382, -0.005925808101892471, 0.042738888412714005, 0.02101607248187065, 0.004562432877719402, 0.022967183962464333, 0.05068215727806091, -0.05836740881204605, 0.029667185619473457, -0.05501493066549301, 0.022937631234526634, 0.012067602016031742, -0.023216523230075836, -0.012862485833466053, -0.005756104830652475, -0.019054558128118515, -0.004101647064089775, -0.013567453250288963, 0.049262356013059616, -0.0818459764122963, 0.002088189125061035, 0.004547484684735537, -0.014179312624037266, -0.005036631599068642, 0.07655830681324005, 0.001175898127257824, 0.024815402925014496, -0.10080649703741074, 0.0002191758103435859, -0.030406642705202103, 0.046130258589982986, -0.10507164150476456, -0.00023346440866589546, 0.09464706480503082, -0.04444347694516182, 0.004432812333106995],
    "identifier": "src/resources/tools/find_one_layover_flights.sqlpp:find_routes_with_one_layover:git_a2dc7a02483b93406e1c82c62ef6b89558373451",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_routes_with_one_layover",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_routes_with_one_layover\n\ndescription: >\n    Find a list of routes between two airports with one layover.\n    The routes always start at source_airport and end at destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM  `travel-sample`.inventory.route r1,\n      `travel-sample`.inventory.route r2\nWHERE  r1.sourceairport = $source_airport AND\n       r1.destinationairport = r2.sourceairport AND\n       r2.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [r1.airline, r2.airline],\n               \"layovers\"     : [r1.destinationairport],\n               \"from_airport\" : r1.sourceairport,\n               \"to_airport\"   : r2.destinationairport }\nLIMIT  10;",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/tools/find_one_layover_flights.sqlpp",
    "version":
    {
      "identifier": "a2dc7a02483b93406e1c82c62ef6b89558373451",
      "is_dirty": false,
      "timestamp": "2024-10-15T10:11:18.196687Z",
      "version_system": "git"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nfrom agentc_core.tool import tool\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Book a flight using the provided ticket information",
    "embedding": [0.07964880764484406, -0.018928134813904762, -0.03423721343278885, 0.04087969660758972, 0.019528895616531372, 0.007520340383052826, 0.12816505134105682, 0.047011107206344604, 0.0016612206818535924, 0.023554373532533646, -0.01706799492239952, 0.01863865740597248, -0.07241134345531464, -0.015392075292766094, -0.004064030013978481, 0.014077767729759216, 0.05484426021575928, 0.006082844454795122, 0.011817185208201408, 0.032555676996707916, 0.016294153407216072, 0.024236125871539116, -0.10591596364974976, 0.08768225461244583, 0.02460390143096447, 0.00842532142996788, 0.026636172086000443, 0.008889399468898773, 0.012042396701872349, -0.0013659483520314097, -0.028945963829755783, 0.06696529686450958, 0.04953616112470627, -0.007986904121935368, 0.0021285959519445896, -0.035613998770713806, -0.07248246669769287, 0.06310911476612091, -0.033650774508714676, -0.05242227762937546, 0.06089279055595398, -0.04390202462673187, -0.01517445594072342, 0.06504575163125992, 0.024981575086712837, 0.0347428135573864, -0.006623835302889347, 0.02338004671037197, 0.012037262320518494, 0.10167750716209412, -0.032375480979681015, -0.006227402947843075, 0.020628146827220917, -0.024457840248942375, 0.0803593322634697, 0.04440919682383537, -0.038535140454769135, -0.10515641421079636, -0.01023316103965044, -0.03387513384222984, -0.04497557878494263, -0.09114998579025269, -0.0063795726746320724, 0.016451258212327957, -0.052693359553813934, 0.03754543140530586, -0.05479910969734192, 0.05478617176413536, 0.027508286759257317, -0.03594018518924713, -0.026382852345705032, 0.10874535888433456, -0.0639149621129036, 0.0024481764994561672, 0.03069448471069336, -0.019944898784160614, -0.011753843165934086, -0.05031245946884155, 0.08277206122875214, 0.01529524102807045, 0.03145517781376839, -0.0115988589823246, 0.019632816314697266, 0.05537066236138344, 0.0247513260692358, 0.01458441186696291, -0.06307465583086014, -0.027157114818692207, 0.056816112250089645, -0.010094981640577316, 0.047662097960710526, -0.08436997979879379, -0.005597311072051525, 0.03166290372610092, -0.09785505384206772, 0.02739490009844303, -0.0020093254279345274, -0.09966198354959488, 0.04427255690097809, 0.06824658066034317, 0.07821102440357208, 0.07123083621263504, 0.0021492941305041313, 0.01759500987827778, 0.0016985830152407289, -0.0574161633849144, 0.04146629571914673, 0.038773201406002045, 0.058933645486831665, -0.045013248920440674, -0.07484118640422821, 0.026087509468197823, -0.0017494871281087399, -0.011575617827475071, -0.03969389945268631, 0.03766465187072754, -0.016423175111413002, 0.08857042342424393, 0.0007244964363053441, -0.1460103839635849, -0.0031033209525048733, -0.09914766252040863, 0.05143743380904198, 0.05193775147199631, -0.05948074162006378, -0.05252041295170784, 0.09039296954870224, -0.06756556779146194, 0.0016742320731282234, 0.007376706227660179, 0.015840718522667885, -0.03291435167193413, -0.05828123167157173, 0.023439733311533928, -0.12406475096940994, 0.021814880892634392, 0.007725051138550043, -0.007560891564935446, -0.08304985612630844, -0.08614331483840942, 0.10590687394142151, 0.013976125046610832, -0.053164124488830566, 0.06271819025278091, 0.001569473068229854, 0.07623541355133057, 0.04078976437449455, -0.021365031599998474, -0.01525783073157072, -0.0019159750081598759, -0.04937305673956871, 0.04435287415981293, 0.022549716755747795, -0.024974698200821877, -0.06444999575614929, 0.03923948481678963, 0.05633820593357086, -0.018756339326500893, 0.04511547461152077, 0.011856711469590664, 0.014521011151373386, -0.09461855888366699, 0.003030421445146203, 0.04636861011385918, -0.009089402854442596, -0.024450339376926422, 0.01019533071666956, 0.01851815916597843, -0.011717886663973331, 0.04134717211127281, -0.0613817423582077, 0.06948478519916534, -0.1031036376953125, -0.007897953502833843, -0.03464801236987114, 0.07252628356218338, 0.0018517504213377833, 0.05424705520272255, 0.0340111218392849, -0.058026272803545, -0.023755298927426338, -0.009022721089422703, -0.027287853881716728, 0.027516283094882965, -0.014237943105399609, -0.04353395849466324, 0.028584491461515427, -0.01529267244040966, -0.005297989584505558, 0.005069497507065535, 0.03095587156713009, -0.018321076408028603, 0.0323038250207901, -0.010913381353020668, 0.03539125248789787, -0.023068098351359367, 0.03723422437906265, -0.09215399622917175, 0.011435220018029213, 0.003108171047642827, -0.0546552948653698, 0.03980855271220207, -0.0372486412525177, 0.0307731032371521, -0.005121974274516106, 0.02438853494822979, -0.07192891091108322, 0.016828589141368866, 0.04402682185173035, 0.10321901738643646, 0.07988739013671875, 0.1111045777797699, 0.0028898261953145266, -0.027094675227999687, 0.09319765120744705, 0.006155073177069426, -0.02544507011771202, -0.04041295498609543, -0.02289518341422081, 0.0005165799520909786, -0.1021217331290245, -0.009356309659779072, 0.03289531543850899, 1.4180324471885192e-33, -0.0542888380587101, -0.04340897873044014, -0.046899814158678055, -0.08285990357398987, -0.005824147257953882, -0.009439598768949509, -0.0083424998447299, -0.12240847200155258, 0.03363526985049248, 0.049185462296009064, -0.05728999897837639, 0.06299988180398941, -0.0013789682416245341, 0.02040710300207138, -0.0075642382726073265, -0.060385990887880325, -0.018397780135273933, -0.006487327627837658, -0.07267403602600098, -0.0020795802120119333, -0.03006926365196705, 0.004339888226240873, -0.10963631421327591, -0.07654475420713425, 0.050999708473682404, 0.024200135841965675, 0.04158279672265053, 0.022635534405708313, -0.024226106703281403, -0.009674075990915298, 0.02045203000307083, -0.06466134637594223, 0.004410143475979567, 0.009705170057713985, -0.059015486389398575, -0.08140535652637482, 0.08108513057231903, 0.11103168874979019, -0.0845056101679802, 0.07095564156770706, -0.03312104940414429, 0.08675476908683777, -0.03290652111172676, 0.030646881088614464, 0.08085745573043823, -0.05017462372779846, 0.03423573076725006, -0.0013929433189332485, 0.05619310215115547, 0.06414144486188889, 0.04464387893676758, 0.023616066202521324, -0.027326280251145363, 0.06010965630412102, -0.012052599340677261, -0.0022531598806381226, -0.01516841258853674, -0.058766577392816544, 0.08404317498207092, -0.03955943137407303, 0.014108916744589806, -0.0813051089644432, 0.09447198361158371, -0.024584922939538956, -0.026491502299904823, 0.029923364520072937, -0.03513151779770851, 0.006369934417307377, -0.01494117733091116, 0.015604577027261257, -0.11056049913167953, -0.041872043162584305, -0.03947502374649048, 0.027909772470593452, 0.044162567704916, 0.008878462947905064, 0.028620416298508644, 0.10030093789100647, -0.021430477499961853, 0.06747014820575714, 0.006156398449093103, -0.01174270361661911, -0.029176514595746994, 0.02374027855694294, 0.04334890469908714, 0.08654502034187317, 0.00984054896980524, -0.05568413808941841, -0.07030946016311646, -0.06579248607158661, -0.050979625433683395, -0.03537115082144737, -0.030670858919620514, -0.07284710556268692, -0.024893272668123245, 3.3284822789191275e-34, -0.0476197823882103, 0.002736486028879881, 0.03604705631732941, 0.03384414315223694, 0.006524118594825268, 0.026372699066996574, -0.0033360093366354704, -0.012681176885962486, -0.06225084140896797, -0.08944921940565109, -0.06458938121795654, -0.003385495161637664, -0.06168466806411743, 0.018351295962929726, 0.010073639452457428, -0.047120437026023865, -0.03859328106045723, -0.02665369026362896, 0.004804999101907015, -0.022272957488894463, 0.040243279188871384, 0.0595502071082592, 0.005112895742058754, 0.013144159689545631, 0.08926770836114883, 0.014693359844386578, -0.04543408751487732, 0.025637108832597733, 0.060379717499017715, 0.04199852794408798, -0.10405222326517105, -9.317712829215452e-05, 0.09813511371612549, 0.03986694663763046, 0.021778324618935585, -0.006264303345233202, -0.04520047456026077, -0.04792947322130203, 0.05035192891955376, 0.09918753057718277, 0.006533753592520952, 0.05279393866658211, -0.04305361211299896, 0.017160573974251747, 0.14707247912883759, -0.07942994683980942, 0.013707953505218029, -0.06787041574716568, 0.013443740084767342, 0.007297547999769449, 0.0033018761314451694, -0.08991078287363052, 0.11881711333990097, 0.027645232155919075, 0.022688860073685646, -0.013549610041081905, -0.07604558765888214, -0.08436269313097, 0.10691287368535995, -0.01278117299079895, -0.02862735092639923, 0.13585355877876282, -0.05579385906457901, 0.027921028435230255],
    "identifier": "src/resources/tools/python_travel_tools.py:book_flight:git__dirty",
    "name": "book_flight",
    "record_kind": "python_function",
    "source": "src/resources/tools/python_travel_tools.py",
    "version":
    {
      "is_dirty": true,
      "timestamp": "2024-10-16T05:34:38.687345Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nfrom agentc_core.tool import tool\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Calculate the travel costs based on distance, fuel efficiency, and fuel price",
    "embedding": [0.16308048367500305, 0.007964512333273888, -0.10284174978733063, 0.06895145773887634, 0.02659645304083824, -0.03926454856991768, -0.04548756405711174, 0.034332338720560074, -0.08820450305938721, -0.05976756289601326, 0.03350057825446129, -0.04948613420128822, -0.07212576270103455, 0.06723728775978088, -0.012649022042751312, -0.053465526551008224, 0.07916895300149918, -0.007809269707649946, -0.030371878296136856, -0.06065647676587105, 0.07716649025678635, -0.05107724294066429, 0.0041677383705973625, 0.006148310843855143, 0.04723590239882469, 0.12147122621536255, -0.04953527823090553, 0.06134748458862305, 0.0012296544155105948, 0.05231368541717529, 0.0008210629457607865, -0.008366469293832779, -0.009221281856298447, -0.0339730940759182, 0.0962454304099083, 0.0004874620644841343, 0.0043964143842458725, 0.053704168647527695, 0.031323399394750595, 0.04703854024410248, 0.013770746998488903, -0.03886426240205765, -0.0450625978410244, 0.05767819285392761, 0.03279730677604675, -0.04227989912033081, 0.01866118423640728, -0.032203178852796555, 0.06376485526561737, 0.023940453305840492, 0.0009818475227802992, -0.04497583582997322, -0.05882011353969574, -0.06330440193414688, 0.023553302511572838, -0.02346869930624962, -0.028243977576494217, -0.05012909695506096, -0.0017763470532372594, -0.06982827931642532, -0.03404587134718895, -0.04914191737771034, -0.008690500631928444, -0.00343574327416718, -0.023080717772245407, -0.029939867556095123, 0.023447399958968163, 0.036764759570360184, 0.013270587660372257, -0.06958264112472534, -0.08520903438329697, 0.027046626433730125, -0.006713233422487974, -0.11786193400621414, 0.021147271618247032, -0.02349058911204338, 0.011925389058887959, 0.08006247133016586, 0.011473651975393295, -0.03556058555841446, 0.01714017614722252, -0.022887153550982475, -0.12161020934581757, 0.05339289456605911, 0.11869019269943237, -0.06801676750183105, 0.06650703400373459, 0.030224008485674858, -0.08028439432382584, 0.006747853476554155, 0.01073302049189806, 0.0007593384361825883, -0.027929598465561867, -0.0045632789842784405, -0.01946631446480751, 0.025124097242951393, -0.004146615508943796, -0.032843559980392456, 0.056989576667547226, 0.015650663524866104, 0.04908955842256546, -0.006374374032020569, -0.0437483936548233, -0.04368669539690018, -0.0689871609210968, 0.012888134457170963, -0.0073205577209591866, -0.035501379519701004, 0.045050330460071564, -0.020175164565443993, 0.06720847636461258, 0.008103125728666782, -0.03271303325891495, -0.0212943684309721, -0.030616242438554764, 0.032784946262836456, 0.07061411440372467, -0.029865749180316925, 0.02903814986348152, 0.051310643553733826, -0.048355117440223694, -0.09566544741392136, 0.009896015748381615, 0.05082159489393234, -0.06553879380226135, -0.0786580964922905, 0.04544643685221672, -0.004593808203935623, -0.14151355624198914, -0.05882728099822998, 0.07351863384246826, 0.046002112329006195, -0.10644420981407166, 0.013771481812000275, -0.09011996537446976, -0.014128737151622772, 0.007906777784228325, -0.020064687356352806, -0.029788285493850708, 0.036153871566057205, 0.08655591309070587, -0.06340261548757553, 0.09169013053178787, -0.03207474201917648, 0.06779464334249496, 0.01132949162274599, -0.02779858000576496, -0.037995267659425735, -0.03692179173231125, -0.04039602726697922, 0.04058915376663208, -0.09519420564174652, 0.006240908522158861, 0.00767094548791647, -0.016496730968356133, -0.05428941920399666, 0.0339394249022007, -0.010476542636752129, -0.00671624019742012, 0.10989436507225037, -0.05204018950462341, 0.02445019967854023, 0.006624625530093908, 0.02410423383116722, -0.023078491911292076, 0.11318325996398926, -0.00982007198035717, -0.00663630198687315, -0.08831940591335297, -0.0277887973934412, 0.0011791521683335304, 0.030961640179157257, -0.028616851195693016, 0.10427746921777725, 0.059581369161605835, -0.04229704290628433, 0.013345735147595406, 0.07850861549377441, -0.0758150964975357, -0.04692350700497627, 0.028712032362818718, -0.05255521088838577, -0.020823974162340164, -0.017047077417373657, -0.003403659211471677, -0.0344681516289711, -0.003741514403373003, -0.0022404713090509176, -0.08513979613780975, 0.11315323412418365, 0.04311458766460419, -0.0169746782630682, 0.07168829441070557, 0.012694800272583961, -0.025893976911902428, -0.0023865450639277697, 0.023848656564950943, 0.04901745542883873, 0.05283840373158455, -0.055798646062612534, 0.06658023595809937, -0.007671679370105267, 0.07875841856002808, -0.0013745062751695514, -0.01778860203921795, -0.017726147547364235, -0.040550075471401215, -0.01899774745106697, -0.07069481164216995, 0.0749349519610405, 0.010068944655358791, 0.00223360164090991, 0.045656319707632065, 0.016256915405392647, 0.03127812221646309, -0.08627504110336304, -0.04902941361069679, 0.02565983310341835, -0.03417164087295532, -0.008165578357875347, -0.0610680989921093, -0.0783446878194809, -0.046369463205337524, -1.5416658002202226e-33, 0.02697613462805748, 0.06879407912492752, 0.01390486303716898, -0.0011774204904213548, 0.05107385665178299, -0.02123732678592205, 0.04521194100379944, -0.03771612048149109, 0.1431361734867096, 0.08813858032226562, -0.12220430374145508, -0.01570952869951725, 0.01155189797282219, 0.0177377350628376, -0.006506327539682388, -0.029066648334264755, 0.0729898139834404, -0.09187157452106476, -0.08997202664613724, 0.04575568065047264, -0.027646880596876144, 0.02374638430774212, -0.12485266476869583, -0.03112746588885784, -0.0016253789654001594, -0.004685581661760807, 0.03358404338359833, -0.02557358331978321, -0.032256484031677246, 0.029818087816238403, 0.02066875249147415, -0.05815288424491882, 0.027868516743183136, 0.10051298141479492, -0.08261573314666748, 0.028512591496109962, 0.018847070634365082, 0.07507584989070892, 0.04328382387757301, 0.017022861167788506, 0.07205738127231598, -0.03161340951919556, -0.017606213688850403, -0.009645508602261543, 0.08326597511768341, 0.08284343034029007, 0.02150537818670273, -0.04896344989538193, 0.018299322575330734, -0.02849956601858139, 0.07545506209135056, 0.05228916183114052, -0.09798365831375122, 0.04666160047054291, -0.02328168787062168, -0.014308244921267033, 0.009846309199929237, -0.020684024319052696, -0.05021766945719719, 0.01979745924472809, 0.0158468559384346, -0.05014955252408981, 0.06963338702917099, 0.04358546808362007, -0.024844694882631302, 0.019346648827195168, 0.03206106647849083, -0.11333118379116058, 0.07148410379886627, -0.042323727160692215, -0.0469125472009182, 0.021389294415712357, 0.01758957840502262, -0.005013503134250641, -0.014052989892661572, 0.007784712594002485, 0.06862685829401016, 0.0724666491150856, -0.001487955916672945, 0.06517632305622101, -0.04746956750750542, -0.015204177238047123, 0.012390024960041046, -0.005260087549686432, -0.037613898515701294, 0.025416633114218712, -0.05459991842508316, -0.033181384205818176, -0.014406513422727585, 0.07208351045846939, 0.0026004097890108824, 0.015497888438403606, 0.008144373074173927, 0.03160443156957626, -0.016193756833672523, 2.2938092768743203e-32, 0.06223215162754059, -0.024368127807974815, -0.07293223589658737, 0.07886558026075363, -0.03983514383435249, 0.009556352160871029, 0.05961088091135025, 0.10511564463376999, -0.06204303354024887, -0.05445561930537224, 0.05402909964323044, 0.0011583444429561496, -0.02041948214173317, 0.09777077287435532, -0.08499257266521454, 0.024852918460965157, -0.005690316669642925, 0.04579637199640274, 0.0044565703719854355, 0.042100805789232254, -0.011448634788393974, 0.10709448158740997, -0.0496627613902092, 0.005195957608520985, 0.033081647008657455, -0.02414870075881481, -0.0530511774122715, 0.007187042851001024, 0.044890280812978745, -0.07790184766054153, -0.012874357402324677, 0.010929708369076252, -0.051742348819971085, 0.04141658917069435, -0.032940156757831573, -0.014790428802371025, -0.018269861117005348, 0.06550859659910202, -0.006231868173927069, 0.09788940101861954, 0.054770104587078094, 0.03412420302629471, -5.831855014548637e-05, -0.000816069426946342, 0.09060164541006088, 0.005384791176766157, -0.05269921198487282, -0.054062943905591965, -0.051568496972322464, -0.026802511885762215, 0.011226960457861423, -0.0017179957358166575, 0.017183346673846245, 0.034514691680669785, -0.11048203706741333, -0.11054053157567978, -0.004182310309261084, -0.012239414267241955, -0.02217630296945572, -0.018096450716257095, 0.00268358550965786, 0.019323747605085373, -0.022271394729614258, -0.013352076523005962],
    "identifier": "src/resources/tools/python_travel_tools.py:calculate_travel_costs:git__dirty",
    "name": "calculate_travel_costs",
    "record_kind": "python_function",
    "source": "src/resources/tools/python_travel_tools.py",
    "version":
    {
      "is_dirty": true,
      "timestamp": "2024-10-16T05:34:38.687345Z"
    }
  }
  ],
  "kind": "tool",
  "source_dirs": ["src/resources/tools"],
  "version":
  {
    "identifier": "fe25a5755bfa9af68e1f1fae9ac45e9e37b37611",
    "is_dirty": false,
    "timestamp": "2024-10-16T05:34:38.523755Z"
  }
}

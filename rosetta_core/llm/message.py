import enum
import pydantic
import typing
import uuid

from ..version import VersionDescriptor


class Role(enum.StrEnum):
    """The different types of messages that are recognized.

    1. Human refers to messages that are generated by a human. Note that some agent frameworks (e.g., ControlFlow) never
       actually use this role, user interaction is performed through tool calls.
    2. System refers to messages that are generated by (none other than) the system. In agent frameworks, these
       messages are typically templated and instantiated with user-defined objectives / instructions.
    3. Tool refers to messages that are generated by a tool. These messages are not to be confused with _assistant_
       messages that generate tool calls.
    4. Assistant refers to all messages that are generated using an LLM.
    5. Feedback refers to messages that are generated as feedback _from the end user_. How these messages are captured
       is application specific."""

    Human = "human"
    System = "system"
    Tool = "tool"
    Assistant = "assistant"
    Feedback = "feedback"


class Message(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(use_enum_values=True, frozen=True)

    timestamp: pydantic.AwareDatetime = pydantic.Field(
        description="Timestamp of the generated message. This field must have a timezone attached as well.",
        examples=["2024-08-26T12:02:59.500Z", "2024-08-26T12:02:59.500+00:00"],
    )

    session: typing.AnyStr = pydantic.Field(
        default_factory=lambda: uuid.uuid4().hex,
        description="The thread / session / conversation this message belongs to.",
    )

    role: Role = pydantic.Field(
        description="The type of producer of this message.",
        examples=[Role.Human, Role.System, Role.Tool, Role.Assistant, Role.Feedback],
    )

    content: typing.Any = pydantic.Field(
        description="The content of the message. This should be as close to the producer as possible.",
    )

    model: typing.AnyStr = pydantic.Field(description="The specific model (LLM) that this message is associated with.")

    grouping: typing.Optional[typing.AnyStr] = pydantic.Field(
        description="A grouping identifier for this message. This is typically associated with a complete "
        "'_generate' invocation.",
        default=None,
    )

    annotations: typing.Optional[typing.Dict] = pydantic.Field(
        description="Additional annotations that can be added to the message.", default_factory=dict
    )

    catalog_version: VersionDescriptor = pydantic.Field(
        description="A unique identifier that defines a catalog version / snapshot / commit."
    )
